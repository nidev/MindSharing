
감정 어휘 분석은 다음과 같이 이루어진다.

1단계 문단의 문장화
2단계 문장의 기초 문장 분리
3단계 주어, 목적어 설정
4단계 기초 문장내 서술 어휘 및 순수 명사어휘 파악
5단계 명사어휘의 경우에는 바로 어휘 테이블로, 서술 어휘는 기본형 탐색 알고리즘을 사용해 어휘테이블로
6단계 감정값 수신 및 기초 문장 내 감정값 설정
7단계 기초 문장에 설정된 감정값들을 정규화
8단계 문단 전체의 흐름에 맞춰 감정값들을 조절
9단계 문단을 결과 객체로 반환
10단계 데이터베이스 학습 테이블에 정규화 및 조절된 감정값 학습 이력 입력

상세 단계:

1단계:
문단에서 따옴표를 모두 제거한다.
문단을 마침표, 물음표, 느낌표 기준으로 잘라내어 토큰을 만든다.

예) 문단: "나는 '밥'을 먹었다. 그러나 배가 고프다. "
   토큰 리스트: "나는 밥을 먹었다", "그러나 배가 고프다"
리턴-토큰들이 저장된 어레이 리스트

2단계:
문자열을 담을 수 있는 새로운 어레이리스트를 생성한다.

기초 문장이라고 함음, 그러나, 그런데, 그리고, 하지만 등의 접속사를 배제한 문장을 의미한다.
기존 문장을 {접속사, 기초 문장}으로 나눈다. 그리고 이 순서대로 배열에 넣는다. 만약 접속사가 없다면 1단계 리스트에서 온 문장 그대로 넣으면 된다.
예) 원래 리스트: "나는 밥을 먹었다", "그러나 배가 고프다"
   처리된 리스트: "나는 밥을 먹었다", "그러나", "배가 고프다"

리턴-접속사와 문장이 분리된, 토큰들이 저장된 어레이 리스트

3단계:주어와 목적어 설정
2단계에서 받아온 문장으로 for문을 돌리면서 다음 작업을 수행한다.
a)먼저 문장을 띄어쓰기 기준으로 자른다. 잘린 조각을 단어라고 부른다.
b)-이/-가/-은/-는 으로 끝나는 단어는 주어 추정 목록에 넣는다
c)-을/-를 로 끝나는 단어는 목적어 추정 목록에 넣는다.

문장 클래스 객체를 생성한다. 생성시 raw문장, 주어추정목록, 목적어 추정 목록을 같이 넘겨준다. 이 객체의 감정값을 0으로 초기화한다.

리턴- 문장 클래스 객체

4단계-5단계-6단계: 기초 문장내 서술 어휘 및 순수 명사어휘 파악
3단계에서 받아온 문장클래스 객체에서 raw문장을 받아서 형태소 분석기를 돌린다. (단어 단위로 돌릴지, 문장 단위로 돌릴지 고민 중)
이때 주어추정목록과 목적어 추정 목록에서, 목적어나 주어로 추정할 수 없는 어휘를 목록에서 모두 제거한다.
만약 현재 단계까지 문장 객체에 주어추정목록이 비어있다면, "나"를 추가한다.

형태소 분석된, 감정이 있을거라고 추정되는 토큰을 DB 조회해 감정값을 가져온다. (유리한 트랜잭션을 위해 문장내에서 한번에 쿼리를 보낼지 검토)
감정값이 존재한다면 그 단어 부분에 설정한다.

각 단어간의 서술 구조를 파악하면서, 서술 관계가 이어지지 않는 토큰에 대해서 감정값을 초기화한다. 모두 설정되면, 작업에 사용한 문장 객체를 반환한다.
(형태소 분석 정보를 함께 담을지 결정해야)

리턴- 문장 클래스 객체

7단계-8단계: 감정값 정규화
감정 수치는 로그를 사용해서 정규화한다. 최소값은 0 (10base log, 1), 최대값은 2(10base log, 100)이다. 모든 감정 벡터는 양의 정수이다.
로그를 사용하는 이유는 감정값 상승에 대한 폭이, 선형함수에 비해서 적기 때문이다.

이 단계에서, 정수로 표현된 감정값들을 모두 상용로그로 정규화한다.

전체적으로 감정 벡터를 확인한 후, 네거티브가 강세인지 포지티브가 강세인지 파악한 다음에 강세인 쪽으로 보정을 한다. 보정 작업은 (강세 감정의 로그값 평균)*(0.1)^x 을 더해 전체적으로 조율한다.
이때 x는 문단 전체의 단어 수를 자연로그값을 정수로 내림한 값이다. 따라서 문단이 길어질 수록 보정에 추가된 값은 감소한다. 

이는 문단이 길어질수록 실질적으로 감정 정보를 거의 기억하지 못한다는 부분에 착안한다. (관련 논문 파악) 사람이 인지 가능한 정보에는 한계가 존재한다.

리턴- 감정 종합 객체(가칭)

8단계-9단계: 분석 결과를 결과 객체로 변환
감정 종합 객체를 CEResultObject내에 포함시킨다. 여기에서 코더가 원하는대로 JSON결과나 TXT결과를 뽑아낼 수 있다.

10단계:
이 작업에서 피드백된 결과는 다시 데이터베이스로 되돌려보낸다.
매번 학습된 결과는 데이터베이스내에 각 단어별로 각 행을 새롭게 구성하며, 감정값을 가져올 때는 이 값들을 모두 테이블에서 가져와 종합적인 값을 제공한다.
각 값은 시간에 비례하여 감소되는, 역비례 관계를 사용해 변환하여 사용한다.

시간이 흐를 수록 사람의 기억은 사라지며, 감정에 대한 정도도 감소하기 때문이다. 이렇게 하여, 과거에 대한 기억을 조금씩 잊고 새로운 형태를 반영할 수 있는 지능을 갖게 된다.

리턴- 없음
 


